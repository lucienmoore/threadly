{
  "version": 3,
  "sources": ["../../fast-diff/diff.js", "../../quill-delta/src/AttributeMap.ts", "../../quill-delta/src/Iterator.ts", "../../quill-delta/src/Op.ts", "../../quill-delta/src/Delta.ts"],
  "sourcesContent": ["/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos, _fix_unicode) {\n  // Check for equality\n  if (text1 === text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (cursor_pos != null) {\n    var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);\n    if (editdiff) {\n      return editdiff;\n    }\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs, _fix_unicode);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length === 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 !== 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (\n        x1 < text1_length && y1 < text2_length &&\n        text1.charAt(x1) === text2.charAt(y1)\n      ) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (\n        x2 < text1_length && y2 < text2_length &&\n        text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)\n      ) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(pointerstart, pointermid) ==\n      text2.substring(pointerstart, pointermid)\n    ) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n      text2.substring(text2.length - pointermid, text2.length - pointerend)\n    ) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {\n      var prefixLength = diff_commonPrefix(\n        longtext.substring(i), shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(\n        longtext.substring(0, i), shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(\n          j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [\n        best_longtext_a, best_longtext_b,\n        best_shorttext_a, best_shorttext_b, best_common\n      ];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff\n */\nfunction diff_cleanupMerge(diffs, fix_unicode) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n      diffs.splice(pointer, 1);\n      continue;\n    }\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        var previous_equality = pointer - count_insert - count_delete - 1;\n        if (fix_unicode) {\n          // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,\n          // we assume that the old and new text in the diff are complete and correct\n          // unicode-encoded JS strings, but the tuple boundaries may fall between\n          // surrogate pairs.  we fix this by shaving off stray surrogates from the end\n          // of the previous equality and the beginning of this equality.  this may create\n          // empty equalities or a common prefix or suffix.  for example, if AB and AC are\n          // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and\n          // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this\n          // particular case, both equalities go away, we absorb any previous inequalities,\n          // and we keep scanning for the next equality before rewriting the tuples.\n          if (previous_equality >= 0 && ends_with_pair_start(diffs[previous_equality][1])) {\n            var stray = diffs[previous_equality][1].slice(-1);\n            diffs[previous_equality][1] = diffs[previous_equality][1].slice(0, -1);\n            text_delete = stray + text_delete;\n            text_insert = stray + text_insert;\n            if (!diffs[previous_equality][1]) {\n              // emptied out previous equality, so delete it and include previous delete/insert\n              diffs.splice(previous_equality, 1);\n              pointer--;\n              var k = previous_equality - 1;\n              if (diffs[k] && diffs[k][0] === DIFF_INSERT) {\n                count_insert++;\n                text_insert = diffs[k][1] + text_insert;\n                k--;\n              }\n              if (diffs[k] && diffs[k][0] === DIFF_DELETE) {\n                count_delete++;\n                text_delete = diffs[k][1] + text_delete;\n                k--;\n              }\n              previous_equality = k;\n            }\n          }\n          if (starts_with_pair_end(diffs[pointer][1])) {\n            var stray = diffs[pointer][1].charAt(0);\n            diffs[pointer][1] = diffs[pointer][1].slice(1);\n            text_delete += stray;\n            text_insert += stray;\n          }\n        }\n        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n          // for empty equality not at end, wait for next equality\n          diffs.splice(pointer, 1);\n          break;\n        }\n        if (text_delete.length > 0 || text_insert.length > 0) {\n          // note that diff_commonPrefix and diff_commonSuffix are unicode-aware\n          if (text_delete.length > 0 && text_insert.length > 0) {\n            // Factor out any common prefixes.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (previous_equality >= 0) {\n                diffs[previous_equality][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixes.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] =\n                text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          var n = count_insert + count_delete;\n          if (text_delete.length === 0 && text_insert.length === 0) {\n            diffs.splice(pointer - n, n);\n            pointer = pointer - n;\n          } else if (text_delete.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 1;\n          } else if (text_insert.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);\n            pointer = pointer - n + 1;\n          } else {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 2;\n          }\n        }\n        if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL &&\n      diffs[pointer + 1][0] === DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n        diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n          diffs[pointer][1].substring(0, diffs[pointer][1].length -\n            diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n        diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n          diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs, fix_unicode);\n  }\n};\n\nfunction is_surrogate_pair_start(charCode) {\n  return charCode >= 0xD800 && charCode <= 0xDBFF;\n}\n\nfunction is_surrogate_pair_end(charCode) {\n  return charCode >= 0xDC00 && charCode <= 0xDFFF;\n}\n\nfunction starts_with_pair_end(str) {\n  return is_surrogate_pair_end(str.charCodeAt(0));\n}\n\nfunction ends_with_pair_start(str) {\n  return is_surrogate_pair_start(str.charCodeAt(str.length - 1));\n}\n\nfunction remove_empty_tuples(tuples) {\n  var ret = [];\n  for (var i = 0; i < tuples.length; i++) {\n    if (tuples[i][1].length > 0) {\n      ret.push(tuples[i]);\n    }\n  }\n  return ret;\n}\n\nfunction make_edit_splice(before, oldMiddle, newMiddle, after) {\n  if (ends_with_pair_start(before) || starts_with_pair_end(after)) {\n    return null;\n  }\n  return remove_empty_tuples([\n    [DIFF_EQUAL, before],\n    [DIFF_DELETE, oldMiddle],\n    [DIFF_INSERT, newMiddle],\n    [DIFF_EQUAL, after]\n  ]);\n}\n\nfunction find_cursor_edit_diff(oldText, newText, cursor_pos) {\n  // note: this runs after equality check has ruled out exact equality\n  var oldRange = typeof cursor_pos === 'number' ?\n    { index: cursor_pos, length: 0 } : cursor_pos.oldRange;\n  var newRange = typeof cursor_pos === 'number' ?\n    null : cursor_pos.newRange;\n  // take into account the old and new selection to generate the best diff\n  // possible for a text edit.  for example, a text change from \"xxx\" to \"xx\"\n  // could be a delete or forwards-delete of any one of the x's, or the\n  // result of selecting two of the x's and typing \"x\".\n  var oldLength = oldText.length;\n  var newLength = newText.length;\n  if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {\n    // see if we have an insert or delete before or after cursor\n    var oldCursor = oldRange.index;\n    var oldBefore = oldText.slice(0, oldCursor);\n    var oldAfter = oldText.slice(oldCursor);\n    var maybeNewCursor = newRange ? newRange.index : null;\n    editBefore: {\n      // is this an insert or delete right before oldCursor?\n      var newCursor = oldCursor + newLength - oldLength;\n      if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {\n        break editBefore;\n      }\n      if (newCursor < 0 || newCursor > newLength) {\n        break editBefore;\n      }\n      var newBefore = newText.slice(0, newCursor);\n      var newAfter = newText.slice(newCursor);\n      if (newAfter !== oldAfter) {\n        break editBefore;\n      }\n      var prefixLength = Math.min(oldCursor, newCursor);\n      var oldPrefix = oldBefore.slice(0, prefixLength);\n      var newPrefix = newBefore.slice(0, prefixLength);\n      if (oldPrefix !== newPrefix) {\n        break editBefore;\n      }\n      var oldMiddle = oldBefore.slice(prefixLength);\n      var newMiddle = newBefore.slice(prefixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);\n    }\n    editAfter: {\n      // is this an insert or delete right after oldCursor?\n      if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {\n        break editAfter;\n      }\n      var cursor = oldCursor;\n      var newBefore = newText.slice(0, cursor);\n      var newAfter = newText.slice(cursor);\n      if (newBefore !== oldBefore) {\n        break editAfter;\n      }\n      var suffixLength = Math.min(oldLength - cursor, newLength - cursor);\n      var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);\n      var newSuffix = newAfter.slice(newAfter.length - suffixLength);\n      if (oldSuffix !== newSuffix) {\n        break editAfter;\n      }\n      var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);\n      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);\n      return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n  if (oldRange.length > 0 && newRange && newRange.length === 0) {\n    replaceRange: {\n      // see if diff could be a splice of the old selection range\n      var oldPrefix = oldText.slice(0, oldRange.index);\n      var oldSuffix = oldText.slice(oldRange.index + oldRange.length);\n      var prefixLength = oldPrefix.length;\n      var suffixLength = oldSuffix.length;\n      if (newLength < prefixLength + suffixLength) {\n        break replaceRange;\n      }\n      var newPrefix = newText.slice(0, prefixLength);\n      var newSuffix = newText.slice(newLength - suffixLength);\n      if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {\n        break replaceRange;\n      }\n      var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);\n      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n\n  return null;\n}\n\nfunction diff(text1, text2, cursor_pos) {\n  // only pass fix_unicode=true at the top level, not when diff_main is\n  // recursively invoked\n  return diff_main(text1, text2, cursor_pos, true);\n}\n\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n", "import cloneDeep from 'lodash.clonedeep';\nimport isEqual from 'lodash.isequal';\n\ninterface AttributeMap {\n  [key: string]: any;\n}\n\nnamespace AttributeMap {\n  export function compose(\n    a: AttributeMap = {},\n    b: AttributeMap = {},\n    keepNull: boolean,\n  ): AttributeMap | undefined {\n    if (typeof a !== 'object') {\n      a = {};\n    }\n    if (typeof b !== 'object') {\n      b = {};\n    }\n    let attributes = cloneDeep(b);\n    if (!keepNull) {\n      attributes = Object.keys(attributes).reduce<AttributeMap>((copy, key) => {\n        if (attributes[key] != null) {\n          copy[key] = attributes[key];\n        }\n        return copy;\n      }, {});\n    }\n    for (const key in a) {\n      if (a[key] !== undefined && b[key] === undefined) {\n        attributes[key] = a[key];\n      }\n    }\n    return Object.keys(attributes).length > 0 ? attributes : undefined;\n  }\n\n  export function diff(\n    a: AttributeMap = {},\n    b: AttributeMap = {},\n  ): AttributeMap | undefined {\n    if (typeof a !== 'object') {\n      a = {};\n    }\n    if (typeof b !== 'object') {\n      b = {};\n    }\n    const attributes = Object.keys(a)\n      .concat(Object.keys(b))\n      .reduce<AttributeMap>((attrs, key) => {\n        if (!isEqual(a[key], b[key])) {\n          attrs[key] = b[key] === undefined ? null : b[key];\n        }\n        return attrs;\n      }, {});\n    return Object.keys(attributes).length > 0 ? attributes : undefined;\n  }\n\n  export function invert(\n    attr: AttributeMap = {},\n    base: AttributeMap = {},\n  ): AttributeMap {\n    attr = attr || {};\n    const baseInverted = Object.keys(base).reduce<AttributeMap>((memo, key) => {\n      if (base[key] !== attr[key] && attr[key] !== undefined) {\n        memo[key] = base[key];\n      }\n      return memo;\n    }, {});\n    return Object.keys(attr).reduce<AttributeMap>((memo, key) => {\n      if (attr[key] !== base[key] && base[key] === undefined) {\n        memo[key] = null;\n      }\n      return memo;\n    }, baseInverted);\n  }\n\n  export function transform(\n    a: AttributeMap | undefined,\n    b: AttributeMap | undefined,\n    priority = false,\n  ): AttributeMap | undefined {\n    if (typeof a !== 'object') {\n      return b;\n    }\n    if (typeof b !== 'object') {\n      return undefined;\n    }\n    if (!priority) {\n      return b; // b simply overwrites us without priority\n    }\n    const attributes = Object.keys(b).reduce<AttributeMap>((attrs, key) => {\n      if (a[key] === undefined) {\n        attrs[key] = b[key]; // null is a valid value\n      }\n      return attrs;\n    }, {});\n    return Object.keys(attributes).length > 0 ? attributes : undefined;\n  }\n}\n\nexport default AttributeMap;\n", "import Op from './Op';\n\nexport default class Iterator {\n  ops: Op[];\n  index: number;\n  offset: number;\n\n  constructor(ops: Op[]) {\n    this.ops = ops;\n    this.index = 0;\n    this.offset = 0;\n  }\n\n  hasNext(): boolean {\n    return this.peekLength() < Infinity;\n  }\n\n  next(length?: number): Op {\n    if (!length) {\n      length = Infinity;\n    }\n    const nextOp = this.ops[this.index];\n    if (nextOp) {\n      const offset = this.offset;\n      const opLength = Op.length(nextOp);\n      if (length >= opLength - offset) {\n        length = opLength - offset;\n        this.index += 1;\n        this.offset = 0;\n      } else {\n        this.offset += length;\n      }\n      if (typeof nextOp.delete === 'number') {\n        return { delete: length };\n      } else {\n        const retOp: Op = {};\n        if (nextOp.attributes) {\n          retOp.attributes = nextOp.attributes;\n        }\n        if (typeof nextOp.retain === 'number') {\n          retOp.retain = length;\n        } else if (typeof nextOp.insert === 'string') {\n          retOp.insert = nextOp.insert.substr(offset, length);\n        } else {\n          // offset should === 0, length should === 1\n          retOp.insert = nextOp.insert;\n        }\n        return retOp;\n      }\n    } else {\n      return { retain: Infinity };\n    }\n  }\n\n  peek(): Op {\n    return this.ops[this.index];\n  }\n\n  peekLength(): number {\n    if (this.ops[this.index]) {\n      // Should never return 0 if our index is being managed correctly\n      return Op.length(this.ops[this.index]) - this.offset;\n    } else {\n      return Infinity;\n    }\n  }\n\n  peekType(): string {\n    if (this.ops[this.index]) {\n      if (typeof this.ops[this.index].delete === 'number') {\n        return 'delete';\n      } else if (typeof this.ops[this.index].retain === 'number') {\n        return 'retain';\n      } else {\n        return 'insert';\n      }\n    }\n    return 'retain';\n  }\n\n  rest(): Op[] {\n    if (!this.hasNext()) {\n      return [];\n    } else if (this.offset === 0) {\n      return this.ops.slice(this.index);\n    } else {\n      const offset = this.offset;\n      const index = this.index;\n      const next = this.next();\n      const rest = this.ops.slice(this.index);\n      this.offset = offset;\n      this.index = index;\n      return [next].concat(rest);\n    }\n  }\n}\n", "import AttributeMap from './AttributeMap';\nimport Iterator from './Iterator';\n\ninterface Op {\n  // only one property out of {insert, delete, retain} will be present\n  insert?: string | object;\n  delete?: number;\n  retain?: number;\n\n  attributes?: AttributeMap;\n}\n\nnamespace Op {\n  export function iterator(ops: Op[]): Iterator {\n    return new Iterator(ops);\n  }\n\n  export function length(op: Op): number {\n    if (typeof op.delete === 'number') {\n      return op.delete;\n    } else if (typeof op.retain === 'number') {\n      return op.retain;\n    } else {\n      return typeof op.insert === 'string' ? op.insert.length : 1;\n    }\n  }\n}\n\nexport default Op;\n", "import diff from 'fast-diff';\nimport cloneDeep from 'lodash.clonedeep';\nimport isEqual from 'lodash.isequal';\nimport AttributeMap from './AttributeMap';\nimport Op from './Op';\n\nconst NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()\n\nclass Delta {\n  static Op = Op;\n  static AttributeMap = AttributeMap;\n\n  ops: Op[];\n  constructor(ops?: Op[] | { ops: Op[] }) {\n    // Assume we are given a well formed ops\n    if (Array.isArray(ops)) {\n      this.ops = ops;\n    } else if (ops != null && Array.isArray(ops.ops)) {\n      this.ops = ops.ops;\n    } else {\n      this.ops = [];\n    }\n  }\n\n  insert(arg: string | object, attributes?: AttributeMap): this {\n    const newOp: Op = {};\n    if (typeof arg === 'string' && arg.length === 0) {\n      return this;\n    }\n    newOp.insert = arg;\n    if (\n      attributes != null &&\n      typeof attributes === 'object' &&\n      Object.keys(attributes).length > 0\n    ) {\n      newOp.attributes = attributes;\n    }\n    return this.push(newOp);\n  }\n\n  delete(length: number): this {\n    if (length <= 0) {\n      return this;\n    }\n    return this.push({ delete: length });\n  }\n\n  retain(length: number, attributes?: AttributeMap): this {\n    if (length <= 0) {\n      return this;\n    }\n    const newOp: Op = { retain: length };\n    if (\n      attributes != null &&\n      typeof attributes === 'object' &&\n      Object.keys(attributes).length > 0\n    ) {\n      newOp.attributes = attributes;\n    }\n    return this.push(newOp);\n  }\n\n  push(newOp: Op): this {\n    let index = this.ops.length;\n    let lastOp = this.ops[index - 1];\n    newOp = cloneDeep(newOp);\n    if (typeof lastOp === 'object') {\n      if (\n        typeof newOp.delete === 'number' &&\n        typeof lastOp.delete === 'number'\n      ) {\n        this.ops[index - 1] = { delete: lastOp.delete + newOp.delete };\n        return this;\n      }\n      // Since it does not matter if we insert before or after deleting at the same index,\n      // always prefer to insert first\n      if (typeof lastOp.delete === 'number' && newOp.insert != null) {\n        index -= 1;\n        lastOp = this.ops[index - 1];\n        if (typeof lastOp !== 'object') {\n          this.ops.unshift(newOp);\n          return this;\n        }\n      }\n      if (isEqual(newOp.attributes, lastOp.attributes)) {\n        if (\n          typeof newOp.insert === 'string' &&\n          typeof lastOp.insert === 'string'\n        ) {\n          this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };\n          if (typeof newOp.attributes === 'object') {\n            this.ops[index - 1].attributes = newOp.attributes;\n          }\n          return this;\n        } else if (\n          typeof newOp.retain === 'number' &&\n          typeof lastOp.retain === 'number'\n        ) {\n          this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };\n          if (typeof newOp.attributes === 'object') {\n            this.ops[index - 1].attributes = newOp.attributes;\n          }\n          return this;\n        }\n      }\n    }\n    if (index === this.ops.length) {\n      this.ops.push(newOp);\n    } else {\n      this.ops.splice(index, 0, newOp);\n    }\n    return this;\n  }\n\n  chop(): this {\n    const lastOp = this.ops[this.ops.length - 1];\n    if (lastOp && lastOp.retain && !lastOp.attributes) {\n      this.ops.pop();\n    }\n    return this;\n  }\n\n  filter(predicate: (op: Op, index: number) => boolean): Op[] {\n    return this.ops.filter(predicate);\n  }\n\n  forEach(predicate: (op: Op, index: number) => void): void {\n    this.ops.forEach(predicate);\n  }\n\n  map<T>(predicate: (op: Op, index: number) => T): T[] {\n    return this.ops.map(predicate);\n  }\n\n  partition(predicate: (op: Op) => boolean): [Op[], Op[]] {\n    const passed: Op[] = [];\n    const failed: Op[] = [];\n    this.forEach((op) => {\n      const target = predicate(op) ? passed : failed;\n      target.push(op);\n    });\n    return [passed, failed];\n  }\n\n  reduce<T>(\n    predicate: (accum: T, curr: Op, index: number) => T,\n    initialValue: T,\n  ): T {\n    return this.ops.reduce(predicate, initialValue);\n  }\n\n  changeLength(): number {\n    return this.reduce((length, elem) => {\n      if (elem.insert) {\n        return length + Op.length(elem);\n      } else if (elem.delete) {\n        return length - elem.delete;\n      }\n      return length;\n    }, 0);\n  }\n\n  length(): number {\n    return this.reduce((length, elem) => {\n      return length + Op.length(elem);\n    }, 0);\n  }\n\n  slice(start = 0, end = Infinity): Delta {\n    const ops = [];\n    const iter = Op.iterator(this.ops);\n    let index = 0;\n    while (index < end && iter.hasNext()) {\n      let nextOp;\n      if (index < start) {\n        nextOp = iter.next(start - index);\n      } else {\n        nextOp = iter.next(end - index);\n        ops.push(nextOp);\n      }\n      index += Op.length(nextOp);\n    }\n    return new Delta(ops);\n  }\n\n  compose(other: Delta): Delta {\n    const thisIter = Op.iterator(this.ops);\n    const otherIter = Op.iterator(other.ops);\n    const ops = [];\n    const firstOther = otherIter.peek();\n    if (\n      firstOther != null &&\n      typeof firstOther.retain === 'number' &&\n      firstOther.attributes == null\n    ) {\n      let firstLeft = firstOther.retain;\n      while (\n        thisIter.peekType() === 'insert' &&\n        thisIter.peekLength() <= firstLeft\n      ) {\n        firstLeft -= thisIter.peekLength();\n        ops.push(thisIter.next());\n      }\n      if (firstOther.retain - firstLeft > 0) {\n        otherIter.next(firstOther.retain - firstLeft);\n      }\n    }\n    const delta = new Delta(ops);\n    while (thisIter.hasNext() || otherIter.hasNext()) {\n      if (otherIter.peekType() === 'insert') {\n        delta.push(otherIter.next());\n      } else if (thisIter.peekType() === 'delete') {\n        delta.push(thisIter.next());\n      } else {\n        const length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n        const thisOp = thisIter.next(length);\n        const otherOp = otherIter.next(length);\n        if (typeof otherOp.retain === 'number') {\n          const newOp: Op = {};\n          if (typeof thisOp.retain === 'number') {\n            newOp.retain = length;\n          } else {\n            newOp.insert = thisOp.insert;\n          }\n          // Preserve null when composing with a retain, otherwise remove it for inserts\n          const attributes = AttributeMap.compose(\n            thisOp.attributes,\n            otherOp.attributes,\n            typeof thisOp.retain === 'number',\n          );\n          if (attributes) {\n            newOp.attributes = attributes;\n          }\n          delta.push(newOp);\n\n          // Optimization if rest of other is just retain\n          if (\n            !otherIter.hasNext() &&\n            isEqual(delta.ops[delta.ops.length - 1], newOp)\n          ) {\n            const rest = new Delta(thisIter.rest());\n            return delta.concat(rest).chop();\n          }\n\n          // Other op should be delete, we could be an insert or retain\n          // Insert + delete cancels out\n        } else if (\n          typeof otherOp.delete === 'number' &&\n          typeof thisOp.retain === 'number'\n        ) {\n          delta.push(otherOp);\n        }\n      }\n    }\n    return delta.chop();\n  }\n\n  concat(other: Delta): Delta {\n    const delta = new Delta(this.ops.slice());\n    if (other.ops.length > 0) {\n      delta.push(other.ops[0]);\n      delta.ops = delta.ops.concat(other.ops.slice(1));\n    }\n    return delta;\n  }\n\n  diff(other: Delta, cursor?: number | diff.CursorInfo): Delta {\n    if (this.ops === other.ops) {\n      return new Delta();\n    }\n    const strings = [this, other].map((delta) => {\n      return delta\n        .map((op) => {\n          if (op.insert != null) {\n            return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;\n          }\n          const prep = delta === other ? 'on' : 'with';\n          throw new Error('diff() called ' + prep + ' non-document');\n        })\n        .join('');\n    });\n    const retDelta = new Delta();\n    const diffResult = diff(strings[0], strings[1], cursor);\n    const thisIter = Op.iterator(this.ops);\n    const otherIter = Op.iterator(other.ops);\n    diffResult.forEach((component: diff.Diff) => {\n      let length = component[1].length;\n      while (length > 0) {\n        let opLength = 0;\n        switch (component[0]) {\n          case diff.INSERT:\n            opLength = Math.min(otherIter.peekLength(), length);\n            retDelta.push(otherIter.next(opLength));\n            break;\n          case diff.DELETE:\n            opLength = Math.min(length, thisIter.peekLength());\n            thisIter.next(opLength);\n            retDelta.delete(opLength);\n            break;\n          case diff.EQUAL:\n            opLength = Math.min(\n              thisIter.peekLength(),\n              otherIter.peekLength(),\n              length,\n            );\n            const thisOp = thisIter.next(opLength);\n            const otherOp = otherIter.next(opLength);\n            if (isEqual(thisOp.insert, otherOp.insert)) {\n              retDelta.retain(\n                opLength,\n                AttributeMap.diff(thisOp.attributes, otherOp.attributes),\n              );\n            } else {\n              retDelta.push(otherOp).delete(opLength);\n            }\n            break;\n        }\n        length -= opLength;\n      }\n    });\n    return retDelta.chop();\n  }\n\n  eachLine(\n    predicate: (\n      line: Delta,\n      attributes: AttributeMap,\n      index: number,\n    ) => boolean | void,\n    newline = '\\n',\n  ): void {\n    const iter = Op.iterator(this.ops);\n    let line = new Delta();\n    let i = 0;\n    while (iter.hasNext()) {\n      if (iter.peekType() !== 'insert') {\n        return;\n      }\n      const thisOp = iter.peek();\n      const start = Op.length(thisOp) - iter.peekLength();\n      const index =\n        typeof thisOp.insert === 'string'\n          ? thisOp.insert.indexOf(newline, start) - start\n          : -1;\n      if (index < 0) {\n        line.push(iter.next());\n      } else if (index > 0) {\n        line.push(iter.next(index));\n      } else {\n        if (predicate(line, iter.next(1).attributes || {}, i) === false) {\n          return;\n        }\n        i += 1;\n        line = new Delta();\n      }\n    }\n    if (line.length() > 0) {\n      predicate(line, {}, i);\n    }\n  }\n\n  invert(base: Delta): Delta {\n    const inverted = new Delta();\n    this.reduce((baseIndex, op) => {\n      if (op.insert) {\n        inverted.delete(Op.length(op));\n      } else if (op.retain && op.attributes == null) {\n        inverted.retain(op.retain);\n        return baseIndex + op.retain;\n      } else if (op.delete || (op.retain && op.attributes)) {\n        const length = (op.delete || op.retain) as number;\n        const slice = base.slice(baseIndex, baseIndex + length);\n        slice.forEach((baseOp) => {\n          if (op.delete) {\n            inverted.push(baseOp);\n          } else if (op.retain && op.attributes) {\n            inverted.retain(\n              Op.length(baseOp),\n              AttributeMap.invert(op.attributes, baseOp.attributes),\n            );\n          }\n        });\n        return baseIndex + length;\n      }\n      return baseIndex;\n    }, 0);\n    return inverted.chop();\n  }\n\n  transform(index: number, priority?: boolean): number;\n  transform(other: Delta, priority?: boolean): Delta;\n  transform(arg: number | Delta, priority = false): typeof arg {\n    priority = !!priority;\n    if (typeof arg === 'number') {\n      return this.transformPosition(arg, priority);\n    }\n    const other: Delta = arg;\n    const thisIter = Op.iterator(this.ops);\n    const otherIter = Op.iterator(other.ops);\n    const delta = new Delta();\n    while (thisIter.hasNext() || otherIter.hasNext()) {\n      if (\n        thisIter.peekType() === 'insert' &&\n        (priority || otherIter.peekType() !== 'insert')\n      ) {\n        delta.retain(Op.length(thisIter.next()));\n      } else if (otherIter.peekType() === 'insert') {\n        delta.push(otherIter.next());\n      } else {\n        const length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n        const thisOp = thisIter.next(length);\n        const otherOp = otherIter.next(length);\n        if (thisOp.delete) {\n          // Our delete either makes their delete redundant or removes their retain\n          continue;\n        } else if (otherOp.delete) {\n          delta.push(otherOp);\n        } else {\n          // We retain either their retain or insert\n          delta.retain(\n            length,\n            AttributeMap.transform(\n              thisOp.attributes,\n              otherOp.attributes,\n              priority,\n            ),\n          );\n        }\n      }\n    }\n    return delta.chop();\n  }\n\n  transformPosition(index: number, priority = false): number {\n    priority = !!priority;\n    const thisIter = Op.iterator(this.ops);\n    let offset = 0;\n    while (thisIter.hasNext() && offset <= index) {\n      const length = thisIter.peekLength();\n      const nextType = thisIter.peekType();\n      thisIter.next();\n      if (nextType === 'delete') {\n        index -= Math.min(length, index - offset);\n        continue;\n      } else if (nextType === 'insert' && (offset < index || !priority)) {\n        index += length;\n      }\n      offset += length;\n    }\n    return index;\n  }\n}\n\nexport = Delta;\n"],
  "mappings": "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",
  "names": ["longtext", "shorttext", "AttributeMap", "key", "Iterator", "Op", "Delta"]
}
